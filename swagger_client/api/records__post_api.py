# coding: utf-8

"""
    Save.TV API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class RecordsPostApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def records_post(self, record_order, **kwargs):  # noqa: E501
        """Creates new records or updates existing records with the given record buffer times.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.records_post(record_order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsRecordOrder record_order: The record order. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.records_post_with_http_info(record_order, **kwargs)  # noqa: E501
        else:
            (data) = self.records_post_with_http_info(record_order, **kwargs)  # noqa: E501
            return data

    def records_post_with_http_info(self, record_order, **kwargs):  # noqa: E501
        """Creates new records or updates existing records with the given record buffer times.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.records_post_with_http_info(record_order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsRecordOrder record_order: The record order. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method records_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_order' is set
        if ('record_order' not in params or
                params['record_order'] is None):
            raise ValueError("Missing the required parameter `record_order` when calling `records_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'record_order' in params:
            body_params = params['record_order']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/records', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def records_post_0(self, id, record_buffer, **kwargs):  # noqa: E501
        """Creates a new record or updates an existing record with the given record buffer times.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.records_post_0(id, record_buffer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the telecast. (required)
        :param SaveTVWebApiRequestModelsRecordBuffer record_buffer: The record buffer times. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.records_post_0_with_http_info(id, record_buffer, **kwargs)  # noqa: E501
        else:
            (data) = self.records_post_0_with_http_info(id, record_buffer, **kwargs)  # noqa: E501
            return data

    def records_post_0_with_http_info(self, id, record_buffer, **kwargs):  # noqa: E501
        """Creates a new record or updates an existing record with the given record buffer times.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.records_post_0_with_http_info(id, record_buffer, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the telecast. (required)
        :param SaveTVWebApiRequestModelsRecordBuffer record_buffer: The record buffer times. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'record_buffer']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method records_post_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `records_post_0`")  # noqa: E501
        # verify the required parameter 'record_buffer' is set
        if ('record_buffer' not in params or
                params['record_buffer'] is None):
            raise ValueError("Missing the required parameter `record_buffer` when calling `records_post_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'record_buffer' in params:
            body_params = params['record_buffer']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/records/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def records_post_resume(self, id, set_record_resume, **kwargs):  # noqa: E501
        """Stores the current stream position for later resume.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.records_post_resume(id, set_record_resume, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The record identifier. (required)
        :param SaveTVWebApiRequestModelsSetRecordResume set_record_resume: The record resume. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.records_post_resume_with_http_info(id, set_record_resume, **kwargs)  # noqa: E501
        else:
            (data) = self.records_post_resume_with_http_info(id, set_record_resume, **kwargs)  # noqa: E501
            return data

    def records_post_resume_with_http_info(self, id, set_record_resume, **kwargs):  # noqa: E501
        """Stores the current stream position for later resume.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.records_post_resume_with_http_info(id, set_record_resume, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The record identifier. (required)
        :param SaveTVWebApiRequestModelsSetRecordResume set_record_resume: The record resume. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'set_record_resume']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method records_post_resume" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `records_post_resume`")  # noqa: E501
        # verify the required parameter 'set_record_resume' is set
        if ('set_record_resume' not in params or
                params['set_record_resume'] is None):
            raise ValueError("Missing the required parameter `set_record_resume` when calling `records_post_resume`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_record_resume' in params:
            body_params = params['set_record_resume']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/records/{id}/resume', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def records_post_tag_download_completed(self, id, **kwargs):  # noqa: E501
        """Creates a tag to mark the record as downloaded.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.records_post_tag_download_completed(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The telecast identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.records_post_tag_download_completed_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.records_post_tag_download_completed_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def records_post_tag_download_completed_with_http_info(self, id, **kwargs):  # noqa: E501
        """Creates a tag to mark the record as downloaded.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.records_post_tag_download_completed_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The telecast identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method records_post_tag_download_completed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `records_post_tag_download_completed`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/records/{id}/tags/download-completed', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
