# coding: utf-8

"""
    Save.TV API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PlaylistsPostApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def playlists_follow_post(self, id, **kwargs):  # noqa: E501
        """Add the playlist of another account to the own saved (followed) playlists.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_follow_post(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The playlist identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playlists_follow_post_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.playlists_follow_post_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def playlists_follow_post_with_http_info(self, id, **kwargs):  # noqa: E501
        """Add the playlist of another account to the own saved (followed) playlists.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_follow_post_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The playlist identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playlists_follow_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `playlists_follow_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/playlists/{id}/follow', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playlists_follow_post_0(self, playlist_id_list, **kwargs):  # noqa: E501
        """Adds the playlists of another accounts to the own saved (followed) playlists.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_follow_post_0(playlist_id_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsPlaylistIdList playlist_id_list: The playlist identifier list. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playlists_follow_post_0_with_http_info(playlist_id_list, **kwargs)  # noqa: E501
        else:
            (data) = self.playlists_follow_post_0_with_http_info(playlist_id_list, **kwargs)  # noqa: E501
            return data

    def playlists_follow_post_0_with_http_info(self, playlist_id_list, **kwargs):  # noqa: E501
        """Adds the playlists of another accounts to the own saved (followed) playlists.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_follow_post_0_with_http_info(playlist_id_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsPlaylistIdList playlist_id_list: The playlist identifier list. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['playlist_id_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playlists_follow_post_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'playlist_id_list' is set
        if ('playlist_id_list' not in params or
                params['playlist_id_list'] is None):
            raise ValueError("Missing the required parameter `playlist_id_list` when calling `playlists_follow_post_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'playlist_id_list' in params:
            body_params = params['playlist_id_list']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/playlists/follow', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playlists_items_post_item(self, id, telecast_id, **kwargs):  # noqa: E501
        """Appends the given telecast to the playlist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_items_post_item(id, telecast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The playlist identifier. (required)
        :param int telecast_id: The telecast identifier. (required)
        :return: SaveTVWebApiResponseModelsPlaylistItemOperation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playlists_items_post_item_with_http_info(id, telecast_id, **kwargs)  # noqa: E501
        else:
            (data) = self.playlists_items_post_item_with_http_info(id, telecast_id, **kwargs)  # noqa: E501
            return data

    def playlists_items_post_item_with_http_info(self, id, telecast_id, **kwargs):  # noqa: E501
        """Appends the given telecast to the playlist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_items_post_item_with_http_info(id, telecast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The playlist identifier. (required)
        :param int telecast_id: The telecast identifier. (required)
        :return: SaveTVWebApiResponseModelsPlaylistItemOperation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'telecast_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playlists_items_post_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `playlists_items_post_item`")  # noqa: E501
        # verify the required parameter 'telecast_id' is set
        if ('telecast_id' not in params or
                params['telecast_id'] is None):
            raise ValueError("Missing the required parameter `telecast_id` when calling `playlists_items_post_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'telecast_id' in params:
            path_params['telecastId'] = params['telecast_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/playlists/{id}/items/{telecastid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SaveTVWebApiResponseModelsPlaylistItemOperation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playlists_items_post_item_0(self, telecast_id, **kwargs):  # noqa: E501
        """Appends the given telecast to the default playlist \"Sp�ter ansehen\".  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_items_post_item_0(telecast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int telecast_id: The identifier. (required)
        :return: SaveTVWebApiResponseModelsPlaylistItemOperation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playlists_items_post_item_0_with_http_info(telecast_id, **kwargs)  # noqa: E501
        else:
            (data) = self.playlists_items_post_item_0_with_http_info(telecast_id, **kwargs)  # noqa: E501
            return data

    def playlists_items_post_item_0_with_http_info(self, telecast_id, **kwargs):  # noqa: E501
        """Appends the given telecast to the default playlist \"Sp�ter ansehen\".  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_items_post_item_0_with_http_info(telecast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int telecast_id: The identifier. (required)
        :return: SaveTVWebApiResponseModelsPlaylistItemOperation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['telecast_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playlists_items_post_item_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'telecast_id' is set
        if ('telecast_id' not in params or
                params['telecast_id'] is None):
            raise ValueError("Missing the required parameter `telecast_id` when calling `playlists_items_post_item_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'telecast_id' in params:
            path_params['telecastId'] = params['telecast_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/playlists/watch-later/items/{telecastid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SaveTVWebApiResponseModelsPlaylistItemOperation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playlists_items_post_items(self, id, telecast_id_list, **kwargs):  # noqa: E501
        """Appends the given telecasts to the playlist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_items_post_items(id, telecast_id_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The playlist identifier. (required)
        :param SaveTVWebApiRequestModelsTelecastIdList telecast_id_list: The new playlist item. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playlists_items_post_items_with_http_info(id, telecast_id_list, **kwargs)  # noqa: E501
        else:
            (data) = self.playlists_items_post_items_with_http_info(id, telecast_id_list, **kwargs)  # noqa: E501
            return data

    def playlists_items_post_items_with_http_info(self, id, telecast_id_list, **kwargs):  # noqa: E501
        """Appends the given telecasts to the playlist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_items_post_items_with_http_info(id, telecast_id_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The playlist identifier. (required)
        :param SaveTVWebApiRequestModelsTelecastIdList telecast_id_list: The new playlist item. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'telecast_id_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playlists_items_post_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `playlists_items_post_items`")  # noqa: E501
        # verify the required parameter 'telecast_id_list' is set
        if ('telecast_id_list' not in params or
                params['telecast_id_list'] is None):
            raise ValueError("Missing the required parameter `telecast_id_list` when calling `playlists_items_post_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'telecast_id_list' in params:
            body_params = params['telecast_id_list']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/playlists/{id}/items', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playlists_items_post_items_0(self, telecast_id_list, **kwargs):  # noqa: E501
        """Appends the given telecasts to the default playlist \"Sp�ter ansehen\".  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_items_post_items_0(telecast_id_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsTelecastIdList telecast_id_list: The new playlist item. (required)
        :return: list[SaveTVWebApiResponseModelsPlaylistItemOperation]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playlists_items_post_items_0_with_http_info(telecast_id_list, **kwargs)  # noqa: E501
        else:
            (data) = self.playlists_items_post_items_0_with_http_info(telecast_id_list, **kwargs)  # noqa: E501
            return data

    def playlists_items_post_items_0_with_http_info(self, telecast_id_list, **kwargs):  # noqa: E501
        """Appends the given telecasts to the default playlist \"Sp�ter ansehen\".  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_items_post_items_0_with_http_info(telecast_id_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsTelecastIdList telecast_id_list: The new playlist item. (required)
        :return: list[SaveTVWebApiResponseModelsPlaylistItemOperation]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['telecast_id_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playlists_items_post_items_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'telecast_id_list' is set
        if ('telecast_id_list' not in params or
                params['telecast_id_list'] is None):
            raise ValueError("Missing the required parameter `telecast_id_list` when calling `playlists_items_post_items_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'telecast_id_list' in params:
            body_params = params['telecast_id_list']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/playlists/watch-later/items', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SaveTVWebApiResponseModelsPlaylistItemOperation]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playlists_items_post_position(self, id, position, telecast_id, **kwargs):  # noqa: E501
        """Sets the given telecast at the given index in the playlist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_items_post_position(id, position, telecast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The playlist identifier. (required)
        :param int position: The target position. (required)
        :param int telecast_id: The telecast identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playlists_items_post_position_with_http_info(id, position, telecast_id, **kwargs)  # noqa: E501
        else:
            (data) = self.playlists_items_post_position_with_http_info(id, position, telecast_id, **kwargs)  # noqa: E501
            return data

    def playlists_items_post_position_with_http_info(self, id, position, telecast_id, **kwargs):  # noqa: E501
        """Sets the given telecast at the given index in the playlist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_items_post_position_with_http_info(id, position, telecast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The playlist identifier. (required)
        :param int position: The target position. (required)
        :param int telecast_id: The telecast identifier. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'position', 'telecast_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playlists_items_post_position" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `playlists_items_post_position`")  # noqa: E501
        # verify the required parameter 'position' is set
        if ('position' not in params or
                params['position'] is None):
            raise ValueError("Missing the required parameter `position` when calling `playlists_items_post_position`")  # noqa: E501
        # verify the required parameter 'telecast_id' is set
        if ('telecast_id' not in params or
                params['telecast_id'] is None):
            raise ValueError("Missing the required parameter `telecast_id` when calling `playlists_items_post_position`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'position' in params:
            path_params['position'] = params['position']  # noqa: E501
        if 'telecast_id' in params:
            path_params['telecastId'] = params['telecast_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/playlists/{id}/items/{telecastid}/positions/{position}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playlists_items_post_positions(self, id, telecast_id_list, **kwargs):  # noqa: E501
        """Sets the positions off all playlist items.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_items_post_positions(id, telecast_id_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier. (required)
        :param SaveTVWebApiRequestModelsTelecastIdList telecast_id_list: The telecast identifier list. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playlists_items_post_positions_with_http_info(id, telecast_id_list, **kwargs)  # noqa: E501
        else:
            (data) = self.playlists_items_post_positions_with_http_info(id, telecast_id_list, **kwargs)  # noqa: E501
            return data

    def playlists_items_post_positions_with_http_info(self, id, telecast_id_list, **kwargs):  # noqa: E501
        """Sets the positions off all playlist items.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_items_post_positions_with_http_info(id, telecast_id_list, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier. (required)
        :param SaveTVWebApiRequestModelsTelecastIdList telecast_id_list: The telecast identifier list. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'telecast_id_list']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playlists_items_post_positions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `playlists_items_post_positions`")  # noqa: E501
        # verify the required parameter 'telecast_id_list' is set
        if ('telecast_id_list' not in params or
                params['telecast_id_list'] is None):
            raise ValueError("Missing the required parameter `telecast_id_list` when calling `playlists_items_post_positions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'telecast_id_list' in params:
            body_params = params['telecast_id_list']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/playlists/{id}/items/positions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playlists_items_view_item(self, id, telecast_id, **kwargs):  # noqa: E501
        """Sets the given telecast of the given the playlist as last viewed. This telecast will be used as start video when the playlist is resumed.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_items_view_item(id, telecast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The playlist identifier. (required)
        :param int telecast_id: The telecast identifier. (required)
        :return: SaveTVWebApiResponseModelsPlaylistItemOperation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playlists_items_view_item_with_http_info(id, telecast_id, **kwargs)  # noqa: E501
        else:
            (data) = self.playlists_items_view_item_with_http_info(id, telecast_id, **kwargs)  # noqa: E501
            return data

    def playlists_items_view_item_with_http_info(self, id, telecast_id, **kwargs):  # noqa: E501
        """Sets the given telecast of the given the playlist as last viewed. This telecast will be used as start video when the playlist is resumed.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_items_view_item_with_http_info(id, telecast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The playlist identifier. (required)
        :param int telecast_id: The telecast identifier. (required)
        :return: SaveTVWebApiResponseModelsPlaylistItemOperation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'telecast_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playlists_items_view_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `playlists_items_view_item`")  # noqa: E501
        # verify the required parameter 'telecast_id' is set
        if ('telecast_id' not in params or
                params['telecast_id'] is None):
            raise ValueError("Missing the required parameter `telecast_id` when calling `playlists_items_view_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'telecast_id' in params:
            path_params['telecastId'] = params['telecast_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/playlists/{id}/items/{telecastid}/view', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SaveTVWebApiResponseModelsPlaylistItemOperation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playlists_post(self, playlist, **kwargs):  # noqa: E501
        """Creates a new  playlist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_post(playlist, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsPlaylist playlist: The data for the new playlist. (required)
        :return: SaveTVWebApiResponseModelsPlaylist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playlists_post_with_http_info(playlist, **kwargs)  # noqa: E501
        else:
            (data) = self.playlists_post_with_http_info(playlist, **kwargs)  # noqa: E501
            return data

    def playlists_post_with_http_info(self, playlist, **kwargs):  # noqa: E501
        """Creates a new  playlist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_post_with_http_info(playlist, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsPlaylist playlist: The data for the new playlist. (required)
        :return: SaveTVWebApiResponseModelsPlaylist
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['playlist']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playlists_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'playlist' is set
        if ('playlist' not in params or
                params['playlist'] is None):
            raise ValueError("Missing the required parameter `playlist` when calling `playlists_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'playlist' in params:
            body_params = params['playlist']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/playlists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SaveTVWebApiResponseModelsPlaylist',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playlists_post_0(self, id, playlist, **kwargs):  # noqa: E501
        """Updates an existing playlist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_post_0(id, playlist, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The playlist identifier. (required)
        :param SaveTVWebApiRequestModelsPlaylist playlist: The new data for the existing playlist. (required)
        :return: SaveTVWebApiResponseModelsPlaylist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playlists_post_0_with_http_info(id, playlist, **kwargs)  # noqa: E501
        else:
            (data) = self.playlists_post_0_with_http_info(id, playlist, **kwargs)  # noqa: E501
            return data

    def playlists_post_0_with_http_info(self, id, playlist, **kwargs):  # noqa: E501
        """Updates an existing playlist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_post_0_with_http_info(id, playlist, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The playlist identifier. (required)
        :param SaveTVWebApiRequestModelsPlaylist playlist: The new data for the existing playlist. (required)
        :return: SaveTVWebApiResponseModelsPlaylist
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'playlist']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playlists_post_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `playlists_post_0`")  # noqa: E501
        # verify the required parameter 'playlist' is set
        if ('playlist' not in params or
                params['playlist'] is None):
            raise ValueError("Missing the required parameter `playlist` when calling `playlists_post_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'playlist' in params:
            body_params = params['playlist']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/playlists/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SaveTVWebApiResponseModelsPlaylist',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
