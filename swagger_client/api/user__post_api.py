# coding: utf-8

"""
    Save.TV API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UserPostApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def user_access_code_update_access_code(self, access_code_update, **kwargs):  # noqa: E501
        """Updates the AccessCode.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_access_code_update_access_code(access_code_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsAccessCodeUpdate access_code_update: The allowed range for the new code is between 0000 and 9999. The access code must have 4 digits. The old access code can also be the user password. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_access_code_update_access_code_with_http_info(access_code_update, **kwargs)  # noqa: E501
        else:
            (data) = self.user_access_code_update_access_code_with_http_info(access_code_update, **kwargs)  # noqa: E501
            return data

    def user_access_code_update_access_code_with_http_info(self, access_code_update, **kwargs):  # noqa: E501
        """Updates the AccessCode.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_access_code_update_access_code_with_http_info(access_code_update, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsAccessCodeUpdate access_code_update: The allowed range for the new code is between 0000 and 9999. The access code must have 4 digits. The old access code can also be the user password. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['access_code_update']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_access_code_update_access_code" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'access_code_update' is set
        if ('access_code_update' not in params or
                params['access_code_update'] is None):
            raise ValueError("Missing the required parameter `access_code_update` when calling `user_access_code_update_access_code`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'access_code_update' in params:
            body_params = params['access_code_update']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/user/accesscode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_cancel_reminder_create_cancel_reminder(self, **kwargs):  # noqa: E501
        """Creates the contract cancel reminder entry.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_cancel_reminder_create_cancel_reminder(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_cancel_reminder_create_cancel_reminder_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.user_cancel_reminder_create_cancel_reminder_with_http_info(**kwargs)  # noqa: E501
            return data

    def user_cancel_reminder_create_cancel_reminder_with_http_info(self, **kwargs):  # noqa: E501
        """Creates the contract cancel reminder entry.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_cancel_reminder_create_cancel_reminder_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_cancel_reminder_create_cancel_reminder" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/user/cancellation-reminder', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_post(self, user_setting, **kwargs):  # noqa: E501
        """Endpoint for saving user settings.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_post(user_setting, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsUserSetting user_setting: The user settings to save. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_post_with_http_info(user_setting, **kwargs)  # noqa: E501
        else:
            (data) = self.user_post_with_http_info(user_setting, **kwargs)  # noqa: E501
            return data

    def user_post_with_http_info(self, user_setting, **kwargs):  # noqa: E501
        """Endpoint for saving user settings.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_post_with_http_info(user_setting, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsUserSetting user_setting: The user settings to save. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_setting']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_setting' is set
        if ('user_setting' not in params or
                params['user_setting'] is None):
            raise ValueError("Missing the required parameter `user_setting` when calling `user_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'user_setting' in params:
            body_params = params['user_setting']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/user', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_userlane_state_create_userlane_state(self, userlane_state, **kwargs):  # noqa: E501
        """Creates the current state of the userlane for a specific user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_userlane_state_create_userlane_state(userlane_state, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsUserUserlaneState userlane_state: The allowed range for the state is between 1 and 3. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_userlane_state_create_userlane_state_with_http_info(userlane_state, **kwargs)  # noqa: E501
        else:
            (data) = self.user_userlane_state_create_userlane_state_with_http_info(userlane_state, **kwargs)  # noqa: E501
            return data

    def user_userlane_state_create_userlane_state_with_http_info(self, userlane_state, **kwargs):  # noqa: E501
        """Creates the current state of the userlane for a specific user.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_userlane_state_create_userlane_state_with_http_info(userlane_state, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsUserUserlaneState userlane_state: The allowed range for the state is between 1 and 3. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['userlane_state']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_userlane_state_create_userlane_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'userlane_state' is set
        if ('userlane_state' not in params or
                params['userlane_state'] is None):
            raise ValueError("Missing the required parameter `userlane_state` when calling `user_userlane_state_create_userlane_state`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'userlane_state' in params:
            body_params = params['userlane_state']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/user/userlane-state', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
