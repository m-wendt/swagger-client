# coding: utf-8

"""
    Save.TV API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ChannelsPostApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def channels_post_catch_all_channel(self, catch_all_channel, **kwargs):  # noqa: E501
        """Creates the catch all channels for the requested TV stations or for all TV stations.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_post_catch_all_channel(catch_all_channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsCatchAllChannel catch_all_channel: The catch all channel. (required)
        :return: list[SaveTVWebApiResponseModelsChannel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.channels_post_catch_all_channel_with_http_info(catch_all_channel, **kwargs)  # noqa: E501
        else:
            (data) = self.channels_post_catch_all_channel_with_http_info(catch_all_channel, **kwargs)  # noqa: E501
            return data

    def channels_post_catch_all_channel_with_http_info(self, catch_all_channel, **kwargs):  # noqa: E501
        """Creates the catch all channels for the requested TV stations or for all TV stations.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_post_catch_all_channel_with_http_info(catch_all_channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsCatchAllChannel catch_all_channel: The catch all channel. (required)
        :return: list[SaveTVWebApiResponseModelsChannel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['catch_all_channel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method channels_post_catch_all_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'catch_all_channel' is set
        if ('catch_all_channel' not in params or
                params['catch_all_channel'] is None):
            raise ValueError("Missing the required parameter `catch_all_channel` when calling `channels_post_catch_all_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'catch_all_channel' in params:
            body_params = params['catch_all_channel']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/channels/catchall', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SaveTVWebApiResponseModelsChannel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def channels_post_full_text_search_channel(self, full_text_search_channel, **kwargs):  # noqa: E501
        """Creates a full text search channel.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_post_full_text_search_channel(full_text_search_channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsFullTextSearchChannel full_text_search_channel: The full text search channel. (required)
        :return: SaveTVWebApiResponseModelsChannelBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.channels_post_full_text_search_channel_with_http_info(full_text_search_channel, **kwargs)  # noqa: E501
        else:
            (data) = self.channels_post_full_text_search_channel_with_http_info(full_text_search_channel, **kwargs)  # noqa: E501
            return data

    def channels_post_full_text_search_channel_with_http_info(self, full_text_search_channel, **kwargs):  # noqa: E501
        """Creates a full text search channel.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_post_full_text_search_channel_with_http_info(full_text_search_channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsFullTextSearchChannel full_text_search_channel: The full text search channel. (required)
        :return: SaveTVWebApiResponseModelsChannelBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['full_text_search_channel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method channels_post_full_text_search_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'full_text_search_channel' is set
        if ('full_text_search_channel' not in params or
                params['full_text_search_channel'] is None):
            raise ValueError("Missing the required parameter `full_text_search_channel` when calling `channels_post_full_text_search_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'full_text_search_channel' in params:
            body_params = params['full_text_search_channel']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/channels/fulltextsearch', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SaveTVWebApiResponseModelsChannelBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def channels_post_star_channel(self, star_channel, **kwargs):  # noqa: E501
        """Creates a star channel.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_post_star_channel(star_channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsStarChannel star_channel: The star channel. (required)
        :return: SaveTVWebApiResponseModelsChannelBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.channels_post_star_channel_with_http_info(star_channel, **kwargs)  # noqa: E501
        else:
            (data) = self.channels_post_star_channel_with_http_info(star_channel, **kwargs)  # noqa: E501
            return data

    def channels_post_star_channel_with_http_info(self, star_channel, **kwargs):  # noqa: E501
        """Creates a star channel.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_post_star_channel_with_http_info(star_channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsStarChannel star_channel: The star channel. (required)
        :return: SaveTVWebApiResponseModelsChannelBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['star_channel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method channels_post_star_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'star_channel' is set
        if ('star_channel' not in params or
                params['star_channel'] is None):
            raise ValueError("Missing the required parameter `star_channel` when calling `channels_post_star_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'star_channel' in params:
            body_params = params['star_channel']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/channels/star', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SaveTVWebApiResponseModelsChannelBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def channels_post_telecast_ids_channel(self, telecast_ids_channel, **kwargs):  # noqa: E501
        """Creates a channel by various telecast ids.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_post_telecast_ids_channel(telecast_ids_channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsTelecastIdsChannel telecast_ids_channel: The telecast ids channel. (required)
        :return: SaveTVWebApiResponseModelsChannelBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.channels_post_telecast_ids_channel_with_http_info(telecast_ids_channel, **kwargs)  # noqa: E501
        else:
            (data) = self.channels_post_telecast_ids_channel_with_http_info(telecast_ids_channel, **kwargs)  # noqa: E501
            return data

    def channels_post_telecast_ids_channel_with_http_info(self, telecast_ids_channel, **kwargs):  # noqa: E501
        """Creates a channel by various telecast ids.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_post_telecast_ids_channel_with_http_info(telecast_ids_channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsTelecastIdsChannel telecast_ids_channel: The telecast ids channel. (required)
        :return: SaveTVWebApiResponseModelsChannelBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['telecast_ids_channel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method channels_post_telecast_ids_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'telecast_ids_channel' is set
        if ('telecast_ids_channel' not in params or
                params['telecast_ids_channel'] is None):
            raise ValueError("Missing the required parameter `telecast_ids_channel` when calling `channels_post_telecast_ids_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'telecast_ids_channel' in params:
            body_params = params['telecast_ids_channel']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/channels/telecastids', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SaveTVWebApiResponseModelsChannelBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def channels_post_title_channel(self, title_channel, **kwargs):  # noqa: E501
        """Creates a title channel.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_post_title_channel(title_channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsTitleChannel title_channel: The title channel. (required)
        :return: SaveTVWebApiResponseModelsChannelBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.channels_post_title_channel_with_http_info(title_channel, **kwargs)  # noqa: E501
        else:
            (data) = self.channels_post_title_channel_with_http_info(title_channel, **kwargs)  # noqa: E501
            return data

    def channels_post_title_channel_with_http_info(self, title_channel, **kwargs):  # noqa: E501
        """Creates a title channel.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_post_title_channel_with_http_info(title_channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsTitleChannel title_channel: The title channel. (required)
        :return: SaveTVWebApiResponseModelsChannelBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['title_channel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method channels_post_title_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'title_channel' is set
        if ('title_channel' not in params or
                params['title_channel'] is None):
            raise ValueError("Missing the required parameter `title_channel` when calling `channels_post_title_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'title_channel' in params:
            body_params = params['title_channel']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/channels/title', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SaveTVWebApiResponseModelsChannelBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def channels_post_tv_station_channel(self, tv_station_channel, **kwargs):  # noqa: E501
        """Creates a TV station channel.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_post_tv_station_channel(tv_station_channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsTvStationChannel tv_station_channel: The TV station channel. (required)
        :return: SaveTVWebApiResponseModelsChannelBase
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.channels_post_tv_station_channel_with_http_info(tv_station_channel, **kwargs)  # noqa: E501
        else:
            (data) = self.channels_post_tv_station_channel_with_http_info(tv_station_channel, **kwargs)  # noqa: E501
            return data

    def channels_post_tv_station_channel_with_http_info(self, tv_station_channel, **kwargs):  # noqa: E501
        """Creates a TV station channel.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_post_tv_station_channel_with_http_info(tv_station_channel, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SaveTVWebApiRequestModelsTvStationChannel tv_station_channel: The TV station channel. (required)
        :return: SaveTVWebApiResponseModelsChannelBase
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tv_station_channel']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method channels_post_tv_station_channel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tv_station_channel' is set
        if ('tv_station_channel' not in params or
                params['tv_station_channel'] is None):
            raise ValueError("Missing the required parameter `tv_station_channel` when calling `channels_post_tv_station_channel`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'tv_station_channel' in params:
            body_params = params['tv_station_channel']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/channels/tvstation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SaveTVWebApiResponseModelsChannelBase',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
