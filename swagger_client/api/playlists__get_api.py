# coding: utf-8

"""
    Save.TV API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PlaylistsGetApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def playlists_count(self, **kwargs):  # noqa: E501
        """Retrieves the number of own and followed playlists.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SaveTVWebApiResponseModelsPlaylistCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playlists_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.playlists_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def playlists_count_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the number of own and followed playlists.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SaveTVWebApiResponseModelsPlaylistCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playlists_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/playlists/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SaveTVWebApiResponseModelsPlaylistCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playlists_get(self, **kwargs):  # noqa: E501
        """Gets the playlists for the current account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \"id, telecastid\" are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.commentator,    telecast.country,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid
        :param bool ispublic:
        :param list[int] playlistids: A list of playlist ids.
        :param list[int] playlisttypes: A comma-separated list of playlist types.    Values:    1 = The special playlist \"Watch later\" (SpÃ¤ter ansehen).    2 = A playlist created by the user
        :param list[object] sort: Sets the sort properties. The values are comma-separated. To sort ascending add a \"+\" before the sort property, to sort descending add a \"-\" before the sort property.    When omitted, a default sorting is used.    Example: sort=+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    playlisttype    Default sorting:    +name
        :return: list[SaveTVWebApiResponseModelsPlaylist]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playlists_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.playlists_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def playlists_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets the playlists for the current account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \"id, telecastid\" are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.commentator,    telecast.country,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid
        :param bool ispublic:
        :param list[int] playlistids: A list of playlist ids.
        :param list[int] playlisttypes: A comma-separated list of playlist types.    Values:    1 = The special playlist \"Watch later\" (SpÃ¤ter ansehen).    2 = A playlist created by the user
        :param list[object] sort: Sets the sort properties. The values are comma-separated. To sort ascending add a \"+\" before the sort property, to sort descending add a \"-\" before the sort property.    When omitted, a default sorting is used.    Example: sort=+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    playlisttype    Default sorting:    +name
        :return: list[SaveTVWebApiResponseModelsPlaylist]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'ispublic', 'playlistids', 'playlisttypes', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playlists_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'ispublic' in params:
            query_params.append(('ispublic', params['ispublic']))  # noqa: E501
        if 'playlistids' in params:
            query_params.append(('playlistids', params['playlistids']))  # noqa: E501
            collection_formats['playlistids'] = 'multi'  # noqa: E501
        if 'playlisttypes' in params:
            query_params.append(('playlisttypes', params['playlisttypes']))  # noqa: E501
            collection_formats['playlisttypes'] = 'multi'  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/playlists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SaveTVWebApiResponseModelsPlaylist]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playlists_get_0(self, id, **kwargs):  # noqa: E501
        """Gets the details of the playlist specified by the id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_get_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The playlist identifier. (required)
        :param list[str] fields: Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \"id, telecastid\" are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.commentator,    telecast.country,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid
        :return: SaveTVWebApiResponseModelsPlaylist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playlists_get_0_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.playlists_get_0_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def playlists_get_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the details of the playlist specified by the id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_get_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The playlist identifier. (required)
        :param list[str] fields: Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \"id, telecastid\" are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.commentator,    telecast.country,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid
        :return: SaveTVWebApiResponseModelsPlaylist
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playlists_get_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `playlists_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/playlists/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SaveTVWebApiResponseModelsPlaylist',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playlists_get_watch_later(self, **kwargs):  # noqa: E501
        """Gets the playlist \"watch later\" for the current account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_get_watch_later(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \"id, telecastid\" are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.commentator,    telecast.country,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid
        :return: SaveTVWebApiResponseModelsPlaylist
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playlists_get_watch_later_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.playlists_get_watch_later_with_http_info(**kwargs)  # noqa: E501
            return data

    def playlists_get_watch_later_with_http_info(self, **kwargs):  # noqa: E501
        """Gets the playlist \"watch later\" for the current account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_get_watch_later_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \"id, telecastid\" are always transmitted.    _The allowed field values:_    fulltitle,    id,    ispublic,    itemscount,    lasttelecastid,    name,    playlisttype,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.commentator,    telecast.country,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid
        :return: SaveTVWebApiResponseModelsPlaylist
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playlists_get_watch_later" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/playlists/watch-later', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SaveTVWebApiResponseModelsPlaylist',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def playlists_items_get_items(self, id, **kwargs):  # noqa: E501
        """Gets the items for the playlist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_items_get_items(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The playlist identifier. (required)
        :param list[str] fields: Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \"telecastid\" is always transmitted.    _The allowed field values:_    fulltitle,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.commentator,    telecast.country,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid
        :return: list[SaveTVWebApiResponseModelsPlaylistItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.playlists_items_get_items_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.playlists_items_get_items_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def playlists_items_get_items_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets the items for the playlist.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.playlists_items_get_items_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The playlist identifier. (required)
        :param list[str] fields: Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \"telecastid\" is always transmitted.    _The allowed field values:_    fulltitle,    record,    record.adfreeavailable,    record.adfreelength,    record.channels,    record.channels.id,    record.channels.name,    record.createdate,    record.defect.adcut.availablelength,    record.defect.adcut.expectedlength,    record.defect.adcut.istelecastendset,    record.defect.adcut.istelecaststartset,    record.defect.encoding.followuptime.availablelength,    record.defect.encoding.followuptime.expectedlength,    record.defect.encoding.leadtime.availablelength,    record.defect.encoding.leadtime.expectedlength,    record.defect.encoding.telecast.availablelength,    record.defect.encoding.telecast.expectedlength,    record.enddate,    record.formats,    record.formats.cutvideosize,    record.formats.recordformat.id,    record.formats.recordformat.name,    record.formats.recordstate.id,    record.formats.recordstate.name,    record.formats.recordstatemessage,    record.formats.retentiondate,    record.formats.uncutvideosize,    record.isadcutenabled,    record.playlists.id,    record.playlists.name,    record.resumepositions,    record.resumepositions.adfree,    record.resumepositions.default,    record.startdate,    record.tags.key,    record.tags.value,    record.updatedate,    telecast,    telecast.commentator,    telecast.country,    telecast.description,    telecast.director,    telecast.enddate,    telecast.episode,    telecast.existsrecord,    telecast.hasmoved,    telecast.id,    telecast.imageurl100,    telecast.imageurl250,    telecast.imageurl500,    telecast.interpret,    telecast.isblackwhite,    telecast.ishighlight,    telecast.isomitted,    telecast.moderator,    telecast.rating,    telecast.roles,    telecast.roles.rolename,    telecast.roles.starid,    telecast.roles.starname,    telecast.slug,    telecast.startdate,    telecast.subject,    telecast.subtitle,    telecast.title,    telecast.tvcategory.id,    telecast.tvcategory.name,    telecast.tvstation.id,    telecast.tvstation.isrecordable,    telecast.tvstation.largelogourl,    telecast.tvstation.name,    telecast.tvstation.smalllogourl,    telecast.tvsubcategory.id,    telecast.tvsubcategory.name,    telecast.updatedate,    telecast.voluntaryselfregulationofthemovieindustry,    telecast.year,    telecastid
        :return: list[SaveTVWebApiResponseModelsPlaylistItem]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method playlists_items_get_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `playlists_items_get_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/playlists/{id}/items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SaveTVWebApiResponseModelsPlaylistItem]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
