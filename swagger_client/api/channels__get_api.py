# coding: utf-8

"""
    Save.TV API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ChannelsGetApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def channels_count(self, **kwargs):  # noqa: E501
        """Retrieves the number of channels for the current account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SaveTVWebApiResponseModelsChannelCount
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.channels_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.channels_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def channels_count_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the number of channels for the current account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SaveTVWebApiResponseModelsChannelCount
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method channels_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/channels/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SaveTVWebApiResponseModelsChannelCount',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def channels_get(self, **kwargs):  # noqa: E501
        """Retrieves the channels for the current account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channelscope: The channel scope determines which channels will be returned.    Values:    0 = Selects all channels    1 = Selects only standard channels    2 = Selects only channels created by Catch All    The default value: 0
        :param list[str] fields: Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \"channeltype, id\" are always transmitted.    _The allowed field values:_    channelscope,    channeltype,    counttelecasts,    id,    imageurl100,    imageurl250,    imageurl500,    name,    searchquery,    star.id,    star.name,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.name,    tvsubcategory.id,    tvsubcategory.name
        :param list[object] sort: Sets the sort properties. The values are comma-separated. To sort ascending add a \"+\" before the sort property, to sort descending add a \"-\" before the sort property.    When omitted, a default sorting is used.    Example: sort=+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    Default sorting:    +name
        :return: list[SaveTVWebApiResponseModelsChannel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.channels_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.channels_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def channels_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the channels for the current account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int channelscope: The channel scope determines which channels will be returned.    Values:    0 = Selects all channels    1 = Selects only standard channels    2 = Selects only channels created by Catch All    The default value: 0
        :param list[str] fields: Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \"channeltype, id\" are always transmitted.    _The allowed field values:_    channelscope,    channeltype,    counttelecasts,    id,    imageurl100,    imageurl250,    imageurl500,    name,    searchquery,    star.id,    star.name,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.name,    tvsubcategory.id,    tvsubcategory.name
        :param list[object] sort: Sets the sort properties. The values are comma-separated. To sort ascending add a \"+\" before the sort property, to sort descending add a \"-\" before the sort property.    When omitted, a default sorting is used.    Example: sort=+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    Default sorting:    +name
        :return: list[SaveTVWebApiResponseModelsChannel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['channelscope', 'fields', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method channels_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'channelscope' in params:
            query_params.append(('channelscope', params['channelscope']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/channels', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[SaveTVWebApiResponseModelsChannel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def channels_get_0(self, id, **kwargs):  # noqa: E501
        """Retrieves a single channel with the given identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_get_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the channel. (required)
        :param list[str] fields: Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \"channeltype, id\" are always transmitted.    _The allowed field values:_    channelscope,    channeltype,    counttelecasts,    id,    imageurl100,    imageurl250,    imageurl500,    name,    searchquery,    star.id,    star.name,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.name,    tvsubcategory.id,    tvsubcategory.name
        :return: SaveTVEpgDataContextChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.channels_get_0_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.channels_get_0_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def channels_get_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a single channel with the given identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_get_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the channel. (required)
        :param list[str] fields: Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The fields \"channeltype, id\" are always transmitted.    _The allowed field values:_    channelscope,    channeltype,    counttelecasts,    id,    imageurl100,    imageurl250,    imageurl500,    name,    searchquery,    star.id,    star.name,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.name,    tvsubcategory.id,    tvsubcategory.name
        :return: SaveTVEpgDataContextChannel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method channels_get_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `channels_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/channels/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SaveTVEpgDataContextChannel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def channels_telecasts(self, id, **kwargs):  # noqa: E501
        """Retrieves the telecasts that matches the channel criteria.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_telecasts(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the channel. (required)
        :param list[str] fields: Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \"id\" is always transmitted.    _The allowed field values:_    commentator,    country,    description,    director,    enddate,    episode,    existsrecord,    id,    imageurl100,    imageurl250,    imageurl500,    interpret,    isblackwhite,    ishighlight,    isomitted,    moderator,    rating,    roles,    roles.rolename,    roles.starid,    roles.starname,    slug,    startdate,    subject,    subtitle,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.largelogourl,    tvstation.name,    tvstation.smalllogourl,    tvsubcategory.id,    tvsubcategory.name,    updatedate,    voluntaryselfregulationofthemovieindustry,    year
        :param int limit: Sets the maximum number of items in result set.    The default value: 50.    The maximum allowed value: 2000.
        :param bool nopagingheader: By default, the response object is a plain list of items and the paging metadata is put into the header.    Example header:     X-Total-Count: 403    X-Paging-Offset: 0    X-Paging-Limit: 20    When set to true, the response object is a complex object that contains the paging meta data and the items in 2 separate properties. The header does not contain additional values
        :param int offset: Sets the number of data items that are skipped in the result set.    The default value: 0.
        :param list[object] sort: Sets the sort properties. The values are comma-separated. To sort ascending add a \"+\" before the sort property, to sort descending add a \"-\" before the sort property.    When omitted, a default sorting is used.    Example: sort=+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    category    episode    startdate    subcategory    subtitle    title    tvstationposition    year    Default sorting:    +startdate,+tvstationposition
        :return: SaveTVWebApiResponseModelsPagedTelecastList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.channels_telecasts_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.channels_telecasts_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def channels_telecasts_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves the telecasts that matches the channel criteria.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_telecasts_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the channel. (required)
        :param list[str] fields: Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \"id\" is always transmitted.    _The allowed field values:_    commentator,    country,    description,    director,    enddate,    episode,    existsrecord,    id,    imageurl100,    imageurl250,    imageurl500,    interpret,    isblackwhite,    ishighlight,    isomitted,    moderator,    rating,    roles,    roles.rolename,    roles.starid,    roles.starname,    slug,    startdate,    subject,    subtitle,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.largelogourl,    tvstation.name,    tvstation.smalllogourl,    tvsubcategory.id,    tvsubcategory.name,    updatedate,    voluntaryselfregulationofthemovieindustry,    year
        :param int limit: Sets the maximum number of items in result set.    The default value: 50.    The maximum allowed value: 2000.
        :param bool nopagingheader: By default, the response object is a plain list of items and the paging metadata is put into the header.    Example header:     X-Total-Count: 403    X-Paging-Offset: 0    X-Paging-Limit: 20    When set to true, the response object is a complex object that contains the paging meta data and the items in 2 separate properties. The header does not contain additional values
        :param int offset: Sets the number of data items that are skipped in the result set.    The default value: 0.
        :param list[object] sort: Sets the sort properties. The values are comma-separated. To sort ascending add a \"+\" before the sort property, to sort descending add a \"-\" before the sort property.    When omitted, a default sorting is used.    Example: sort=+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    category    episode    startdate    subcategory    subtitle    title    tvstationposition    year    Default sorting:    +startdate,+tvstationposition
        :return: SaveTVWebApiResponseModelsPagedTelecastList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields', 'limit', 'nopagingheader', 'offset', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method channels_telecasts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `channels_telecasts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'nopagingheader' in params:
            query_params.append(('nopagingheader', params['nopagingheader']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/channels/{id}/telecasts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SaveTVWebApiResponseModelsPagedTelecastList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def channels_telecasts_0(self, id, telecast_id, **kwargs):  # noqa: E501
        """Retrieves the telecasts that matches the channel criteria.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_telecasts_0(id, telecast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the channel. (required)
        :param int telecast_id: The identifier of the telecast. (required)
        :param list[str] fields: Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \"id\" is always transmitted.    _The allowed field values:_    commentator,    country,    description,    director,    enddate,    episode,    existsrecord,    id,    imageurl100,    imageurl250,    imageurl500,    interpret,    isblackwhite,    ishighlight,    isomitted,    moderator,    rating,    roles,    roles.rolename,    roles.starid,    roles.starname,    slug,    startdate,    subject,    subtitle,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.largelogourl,    tvstation.name,    tvstation.smalllogourl,    tvsubcategory.id,    tvsubcategory.name,    updatedate,    voluntaryselfregulationofthemovieindustry,    year
        :return: SaveTVWebApiResponseModelsPagedTelecastList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.channels_telecasts_0_with_http_info(id, telecast_id, **kwargs)  # noqa: E501
        else:
            (data) = self.channels_telecasts_0_with_http_info(id, telecast_id, **kwargs)  # noqa: E501
            return data

    def channels_telecasts_0_with_http_info(self, id, telecast_id, **kwargs):  # noqa: E501
        """Retrieves the telecasts that matches the channel criteria.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channels_telecasts_0_with_http_info(id, telecast_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the channel. (required)
        :param int telecast_id: The identifier of the telecast. (required)
        :param list[str] fields: Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \"id\" is always transmitted.    _The allowed field values:_    commentator,    country,    description,    director,    enddate,    episode,    existsrecord,    id,    imageurl100,    imageurl250,    imageurl500,    interpret,    isblackwhite,    ishighlight,    isomitted,    moderator,    rating,    roles,    roles.rolename,    roles.starid,    roles.starname,    slug,    startdate,    subject,    subtitle,    title,    tvcategory.id,    tvcategory.name,    tvstation.id,    tvstation.isrecordable,    tvstation.largelogourl,    tvstation.name,    tvstation.smalllogourl,    tvsubcategory.id,    tvsubcategory.name,    updatedate,    voluntaryselfregulationofthemovieindustry,    year
        :return: SaveTVWebApiResponseModelsPagedTelecastList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'telecast_id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method channels_telecasts_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `channels_telecasts_0`")  # noqa: E501
        # verify the required parameter 'telecast_id' is set
        if ('telecast_id' not in params or
                params['telecast_id'] is None):
            raise ValueError("Missing the required parameter `telecast_id` when calling `channels_telecasts_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'telecast_id' in params:
            path_params['telecastId'] = params['telecast_id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/channels/{id}/telecasts/{telecastid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SaveTVWebApiResponseModelsPagedTelecastList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
