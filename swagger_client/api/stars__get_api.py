# coding: utf-8

"""
    Save.TV API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StarsGetApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def stars_get(self, **kwargs):  # noqa: E501
        """Retrieves the stars that match the filter condition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stars_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \"id\" is always transmitted.    _The allowed field values:_    alternativename,    awards,    awards.count,    awards.name,    birthdate,    birthplace,    dateofdeath,    description,    height,    id,    imageurls100,    imageurls250,    imageurls500,    ishighlight,    links,    links.title,    links.url,    name,    nickname,    placeofdeath
        :param bool hasbirthdaytoday: Determines whether the star must have birthday today or not.
        :param list[int] ids: A comma-separated list of star identifiers.
        :param bool ishighlight: Determines whether the star is marked as important star or not.
        :param int limit: Sets the maximum number of items in result set.    The default value: 20.    The maximum allowed value: 500.
        :param bool nopagingheader: By default, the response object is a plain list of items and the paging metadata is put into the header.    Example header:     X-Total-Count: 403    X-Paging-Offset: 0    X-Paging-Limit: 20    When set to true, the response object is a complex object that contains the paging meta data and the items in 2 separate properties. The header does not contain additional values
        :param int offset: Sets the number of data items that are skipped in the result set.    The default value: 0.
        :param bool playspartinupcomingtelecast: Determines whether the star plays in a telecast within the future EPG.
        :param str q: The search text used for a text search.
        :param list[object] sort: Sets the sort properties. The values are comma-separated. To sort ascending add a \"+\" before the sort property, to sort descending add a \"-\" before the sort property.    When omitted, a default sorting is used.    Example: sort=+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    position    Default sorting:    +name
        :return: SaveTVWebApiResponseModelsPagedStarList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stars_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.stars_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def stars_get_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the stars that match the filter condition.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stars_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] fields: Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \"id\" is always transmitted.    _The allowed field values:_    alternativename,    awards,    awards.count,    awards.name,    birthdate,    birthplace,    dateofdeath,    description,    height,    id,    imageurls100,    imageurls250,    imageurls500,    ishighlight,    links,    links.title,    links.url,    name,    nickname,    placeofdeath
        :param bool hasbirthdaytoday: Determines whether the star must have birthday today or not.
        :param list[int] ids: A comma-separated list of star identifiers.
        :param bool ishighlight: Determines whether the star is marked as important star or not.
        :param int limit: Sets the maximum number of items in result set.    The default value: 20.    The maximum allowed value: 500.
        :param bool nopagingheader: By default, the response object is a plain list of items and the paging metadata is put into the header.    Example header:     X-Total-Count: 403    X-Paging-Offset: 0    X-Paging-Limit: 20    When set to true, the response object is a complex object that contains the paging meta data and the items in 2 separate properties. The header does not contain additional values
        :param int offset: Sets the number of data items that are skipped in the result set.    The default value: 0.
        :param bool playspartinupcomingtelecast: Determines whether the star plays in a telecast within the future EPG.
        :param str q: The search text used for a text search.
        :param list[object] sort: Sets the sort properties. The values are comma-separated. To sort ascending add a \"+\" before the sort property, to sort descending add a \"-\" before the sort property.    When omitted, a default sorting is used.    Example: sort=+prop1,-prop2    Sorts first by prop1 ascending then by prop2 descending.    Allowed sort properties:    name    position    Default sorting:    +name
        :return: SaveTVWebApiResponseModelsPagedStarList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields', 'hasbirthdaytoday', 'ids', 'ishighlight', 'limit', 'nopagingheader', 'offset', 'playspartinupcomingtelecast', 'q', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stars_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'hasbirthdaytoday' in params:
            query_params.append(('hasbirthdaytoday', params['hasbirthdaytoday']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501
        if 'ishighlight' in params:
            query_params.append(('ishighlight', params['ishighlight']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'nopagingheader' in params:
            query_params.append(('nopagingheader', params['nopagingheader']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'playspartinupcomingtelecast' in params:
            query_params.append(('playspartinupcomingtelecast', params['playspartinupcomingtelecast']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
            collection_formats['sort'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/stars', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SaveTVWebApiResponseModelsPagedStarList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stars_get_0(self, id, **kwargs):  # noqa: E501
        """Retrieves a single star with the given identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stars_get_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the star. (required)
        :param list[str] fields: Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \"id\" is always transmitted.    _The allowed field values:_    alternativename,    awards,    awards.count,    awards.name,    birthdate,    birthplace,    dateofdeath,    description,    height,    id,    imageurls100,    imageurls250,    imageurls500,    ishighlight,    links,    links.title,    links.url,    name,    nickname,    placeofdeath
        :return: SaveTVWebApiResponseModelsStar
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stars_get_0_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.stars_get_0_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def stars_get_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieves a single star with the given identifier.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stars_get_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: The identifier of the star. (required)
        :param list[str] fields: Selects the fields that will be transmitted in the response. The field names are comma-separated, case-insensitive and will be trimmed.    The field \"id\" is always transmitted.    _The allowed field values:_    alternativename,    awards,    awards.count,    awards.name,    birthdate,    birthplace,    dateofdeath,    description,    height,    id,    imageurls100,    imageurls250,    imageurls500,    ishighlight,    links,    links.title,    links.url,    name,    nickname,    placeofdeath
        :return: SaveTVWebApiResponseModelsStar
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stars_get_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `stars_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v3/stars/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SaveTVWebApiResponseModelsStar',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
