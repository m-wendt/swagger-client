# coding: utf-8

"""
    Save.TV API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SaveTVWebApiRequestModelsChannelFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel_scope': 'int',
        'sort': 'list[OlympCollectionsSortDescription]',
        'fields': 'list[str]'
    }

    attribute_map = {
        'channel_scope': 'channelScope',
        'sort': 'sort',
        'fields': 'fields'
    }

    def __init__(self, channel_scope=None, sort=None, fields=None):  # noqa: E501
        """SaveTVWebApiRequestModelsChannelFilter - a model defined in Swagger"""  # noqa: E501

        self._channel_scope = None
        self._sort = None
        self._fields = None
        self.discriminator = None

        if channel_scope is not None:
            self.channel_scope = channel_scope
        if sort is not None:
            self.sort = sort
        if fields is not None:
            self.fields = fields

    @property
    def channel_scope(self):
        """Gets the channel_scope of this SaveTVWebApiRequestModelsChannelFilter.  # noqa: E501


        :return: The channel_scope of this SaveTVWebApiRequestModelsChannelFilter.  # noqa: E501
        :rtype: int
        """
        return self._channel_scope

    @channel_scope.setter
    def channel_scope(self, channel_scope):
        """Sets the channel_scope of this SaveTVWebApiRequestModelsChannelFilter.


        :param channel_scope: The channel_scope of this SaveTVWebApiRequestModelsChannelFilter.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if channel_scope not in allowed_values:
            raise ValueError(
                "Invalid value for `channel_scope` ({0}), must be one of {1}"  # noqa: E501
                .format(channel_scope, allowed_values)
            )

        self._channel_scope = channel_scope

    @property
    def sort(self):
        """Gets the sort of this SaveTVWebApiRequestModelsChannelFilter.  # noqa: E501


        :return: The sort of this SaveTVWebApiRequestModelsChannelFilter.  # noqa: E501
        :rtype: list[OlympCollectionsSortDescription]
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this SaveTVWebApiRequestModelsChannelFilter.


        :param sort: The sort of this SaveTVWebApiRequestModelsChannelFilter.  # noqa: E501
        :type: list[OlympCollectionsSortDescription]
        """

        self._sort = sort

    @property
    def fields(self):
        """Gets the fields of this SaveTVWebApiRequestModelsChannelFilter.  # noqa: E501


        :return: The fields of this SaveTVWebApiRequestModelsChannelFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this SaveTVWebApiRequestModelsChannelFilter.


        :param fields: The fields of this SaveTVWebApiRequestModelsChannelFilter.  # noqa: E501
        :type: list[str]
        """

        self._fields = fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaveTVWebApiRequestModelsChannelFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaveTVWebApiRequestModelsChannelFilter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
