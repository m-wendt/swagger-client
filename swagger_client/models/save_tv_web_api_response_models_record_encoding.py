# coding: utf-8

"""
    Save.TV API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SaveTVWebApiResponseModelsRecordEncoding(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lead_time': 'SaveTVWebApiResponseModelsRecordSegment',
        'telecast': 'SaveTVWebApiResponseModelsRecordSegment',
        'follow_up_time': 'SaveTVWebApiResponseModelsRecordSegment'
    }

    attribute_map = {
        'lead_time': 'leadTime',
        'telecast': 'telecast',
        'follow_up_time': 'followUpTime'
    }

    def __init__(self, lead_time=None, telecast=None, follow_up_time=None):  # noqa: E501
        """SaveTVWebApiResponseModelsRecordEncoding - a model defined in Swagger"""  # noqa: E501

        self._lead_time = None
        self._telecast = None
        self._follow_up_time = None
        self.discriminator = None

        if lead_time is not None:
            self.lead_time = lead_time
        if telecast is not None:
            self.telecast = telecast
        if follow_up_time is not None:
            self.follow_up_time = follow_up_time

    @property
    def lead_time(self):
        """Gets the lead_time of this SaveTVWebApiResponseModelsRecordEncoding.  # noqa: E501


        :return: The lead_time of this SaveTVWebApiResponseModelsRecordEncoding.  # noqa: E501
        :rtype: SaveTVWebApiResponseModelsRecordSegment
        """
        return self._lead_time

    @lead_time.setter
    def lead_time(self, lead_time):
        """Sets the lead_time of this SaveTVWebApiResponseModelsRecordEncoding.


        :param lead_time: The lead_time of this SaveTVWebApiResponseModelsRecordEncoding.  # noqa: E501
        :type: SaveTVWebApiResponseModelsRecordSegment
        """

        self._lead_time = lead_time

    @property
    def telecast(self):
        """Gets the telecast of this SaveTVWebApiResponseModelsRecordEncoding.  # noqa: E501


        :return: The telecast of this SaveTVWebApiResponseModelsRecordEncoding.  # noqa: E501
        :rtype: SaveTVWebApiResponseModelsRecordSegment
        """
        return self._telecast

    @telecast.setter
    def telecast(self, telecast):
        """Sets the telecast of this SaveTVWebApiResponseModelsRecordEncoding.


        :param telecast: The telecast of this SaveTVWebApiResponseModelsRecordEncoding.  # noqa: E501
        :type: SaveTVWebApiResponseModelsRecordSegment
        """

        self._telecast = telecast

    @property
    def follow_up_time(self):
        """Gets the follow_up_time of this SaveTVWebApiResponseModelsRecordEncoding.  # noqa: E501


        :return: The follow_up_time of this SaveTVWebApiResponseModelsRecordEncoding.  # noqa: E501
        :rtype: SaveTVWebApiResponseModelsRecordSegment
        """
        return self._follow_up_time

    @follow_up_time.setter
    def follow_up_time(self, follow_up_time):
        """Sets the follow_up_time of this SaveTVWebApiResponseModelsRecordEncoding.


        :param follow_up_time: The follow_up_time of this SaveTVWebApiResponseModelsRecordEncoding.  # noqa: E501
        :type: SaveTVWebApiResponseModelsRecordSegment
        """

        self._follow_up_time = follow_up_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaveTVWebApiResponseModelsRecordEncoding, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaveTVWebApiResponseModelsRecordEncoding):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
