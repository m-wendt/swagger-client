# coding: utf-8

"""
    Save.TV API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SaveTVWebApiResponseModelsTimeBlock(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'display_start_time': 'str',
        'filter_start_time': 'str',
        'start_time_day_offset': 'int',
        'display_end_time': 'str',
        'filter_end_time': 'str',
        'end_time_day_offset': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'display_start_time': 'displayStartTime',
        'filter_start_time': 'filterStartTime',
        'start_time_day_offset': 'startTimeDayOffset',
        'display_end_time': 'displayEndTime',
        'filter_end_time': 'filterEndTime',
        'end_time_day_offset': 'endTimeDayOffset'
    }

    def __init__(self, id=None, name=None, display_start_time=None, filter_start_time=None, start_time_day_offset=None, display_end_time=None, filter_end_time=None, end_time_day_offset=None):  # noqa: E501
        """SaveTVWebApiResponseModelsTimeBlock - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._display_start_time = None
        self._filter_start_time = None
        self._start_time_day_offset = None
        self._display_end_time = None
        self._filter_end_time = None
        self._end_time_day_offset = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if display_start_time is not None:
            self.display_start_time = display_start_time
        if filter_start_time is not None:
            self.filter_start_time = filter_start_time
        if start_time_day_offset is not None:
            self.start_time_day_offset = start_time_day_offset
        if display_end_time is not None:
            self.display_end_time = display_end_time
        if filter_end_time is not None:
            self.filter_end_time = filter_end_time
        if end_time_day_offset is not None:
            self.end_time_day_offset = end_time_day_offset

    @property
    def id(self):
        """Gets the id of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501


        :return: The id of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SaveTVWebApiResponseModelsTimeBlock.


        :param id: The id of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501


        :return: The name of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SaveTVWebApiResponseModelsTimeBlock.


        :param name: The name of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_start_time(self):
        """Gets the display_start_time of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501


        :return: The display_start_time of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501
        :rtype: str
        """
        return self._display_start_time

    @display_start_time.setter
    def display_start_time(self, display_start_time):
        """Sets the display_start_time of this SaveTVWebApiResponseModelsTimeBlock.


        :param display_start_time: The display_start_time of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501
        :type: str
        """

        self._display_start_time = display_start_time

    @property
    def filter_start_time(self):
        """Gets the filter_start_time of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501


        :return: The filter_start_time of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501
        :rtype: str
        """
        return self._filter_start_time

    @filter_start_time.setter
    def filter_start_time(self, filter_start_time):
        """Sets the filter_start_time of this SaveTVWebApiResponseModelsTimeBlock.


        :param filter_start_time: The filter_start_time of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501
        :type: str
        """

        self._filter_start_time = filter_start_time

    @property
    def start_time_day_offset(self):
        """Gets the start_time_day_offset of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501


        :return: The start_time_day_offset of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501
        :rtype: int
        """
        return self._start_time_day_offset

    @start_time_day_offset.setter
    def start_time_day_offset(self, start_time_day_offset):
        """Sets the start_time_day_offset of this SaveTVWebApiResponseModelsTimeBlock.


        :param start_time_day_offset: The start_time_day_offset of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501
        :type: int
        """

        self._start_time_day_offset = start_time_day_offset

    @property
    def display_end_time(self):
        """Gets the display_end_time of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501


        :return: The display_end_time of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501
        :rtype: str
        """
        return self._display_end_time

    @display_end_time.setter
    def display_end_time(self, display_end_time):
        """Sets the display_end_time of this SaveTVWebApiResponseModelsTimeBlock.


        :param display_end_time: The display_end_time of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501
        :type: str
        """

        self._display_end_time = display_end_time

    @property
    def filter_end_time(self):
        """Gets the filter_end_time of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501


        :return: The filter_end_time of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501
        :rtype: str
        """
        return self._filter_end_time

    @filter_end_time.setter
    def filter_end_time(self, filter_end_time):
        """Sets the filter_end_time of this SaveTVWebApiResponseModelsTimeBlock.


        :param filter_end_time: The filter_end_time of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501
        :type: str
        """

        self._filter_end_time = filter_end_time

    @property
    def end_time_day_offset(self):
        """Gets the end_time_day_offset of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501


        :return: The end_time_day_offset of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501
        :rtype: int
        """
        return self._end_time_day_offset

    @end_time_day_offset.setter
    def end_time_day_offset(self, end_time_day_offset):
        """Sets the end_time_day_offset of this SaveTVWebApiResponseModelsTimeBlock.


        :param end_time_day_offset: The end_time_day_offset of this SaveTVWebApiResponseModelsTimeBlock.  # noqa: E501
        :type: int
        """

        self._end_time_day_offset = end_time_day_offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaveTVWebApiResponseModelsTimeBlock, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaveTVWebApiResponseModelsTimeBlock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
