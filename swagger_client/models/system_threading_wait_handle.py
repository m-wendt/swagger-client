# coding: utf-8

"""
    Save.TV API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemThreadingWaitHandle(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'handle': 'SystemObject',
        'safe_wait_handle': 'MicrosoftWin32SafeHandlesSafeWaitHandle'
    }

    attribute_map = {
        'handle': 'Handle',
        'safe_wait_handle': 'SafeWaitHandle'
    }

    def __init__(self, handle=None, safe_wait_handle=None):  # noqa: E501
        """SystemThreadingWaitHandle - a model defined in Swagger"""  # noqa: E501

        self._handle = None
        self._safe_wait_handle = None
        self.discriminator = None

        if handle is not None:
            self.handle = handle
        if safe_wait_handle is not None:
            self.safe_wait_handle = safe_wait_handle

    @property
    def handle(self):
        """Gets the handle of this SystemThreadingWaitHandle.  # noqa: E501


        :return: The handle of this SystemThreadingWaitHandle.  # noqa: E501
        :rtype: SystemObject
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """Sets the handle of this SystemThreadingWaitHandle.


        :param handle: The handle of this SystemThreadingWaitHandle.  # noqa: E501
        :type: SystemObject
        """

        self._handle = handle

    @property
    def safe_wait_handle(self):
        """Gets the safe_wait_handle of this SystemThreadingWaitHandle.  # noqa: E501


        :return: The safe_wait_handle of this SystemThreadingWaitHandle.  # noqa: E501
        :rtype: MicrosoftWin32SafeHandlesSafeWaitHandle
        """
        return self._safe_wait_handle

    @safe_wait_handle.setter
    def safe_wait_handle(self, safe_wait_handle):
        """Sets the safe_wait_handle of this SystemThreadingWaitHandle.


        :param safe_wait_handle: The safe_wait_handle of this SystemThreadingWaitHandle.  # noqa: E501
        :type: MicrosoftWin32SafeHandlesSafeWaitHandle
        """

        self._safe_wait_handle = safe_wait_handle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemThreadingWaitHandle, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemThreadingWaitHandle):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
