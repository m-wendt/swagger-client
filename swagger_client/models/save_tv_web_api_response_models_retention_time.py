# coding: utf-8

"""
    Save.TV API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SaveTVWebApiResponseModelsRetentionTime(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_extended_retention_time_permission': 'bool',
        'days_divx': 'int',
        'days_h264mobile': 'int',
        'days_h264sd': 'int',
        'days_h264hd': 'int'
    }

    attribute_map = {
        'has_extended_retention_time_permission': 'hasExtendedRetentionTimePermission',
        'days_divx': 'daysDivx',
        'days_h264mobile': 'daysH264mobile',
        'days_h264sd': 'daysH264sd',
        'days_h264hd': 'daysH264hd'
    }

    def __init__(self, has_extended_retention_time_permission=None, days_divx=None, days_h264mobile=None, days_h264sd=None, days_h264hd=None):  # noqa: E501
        """SaveTVWebApiResponseModelsRetentionTime - a model defined in Swagger"""  # noqa: E501

        self._has_extended_retention_time_permission = None
        self._days_divx = None
        self._days_h264mobile = None
        self._days_h264sd = None
        self._days_h264hd = None
        self.discriminator = None

        if has_extended_retention_time_permission is not None:
            self.has_extended_retention_time_permission = has_extended_retention_time_permission
        if days_divx is not None:
            self.days_divx = days_divx
        if days_h264mobile is not None:
            self.days_h264mobile = days_h264mobile
        if days_h264sd is not None:
            self.days_h264sd = days_h264sd
        if days_h264hd is not None:
            self.days_h264hd = days_h264hd

    @property
    def has_extended_retention_time_permission(self):
        """Gets the has_extended_retention_time_permission of this SaveTVWebApiResponseModelsRetentionTime.  # noqa: E501


        :return: The has_extended_retention_time_permission of this SaveTVWebApiResponseModelsRetentionTime.  # noqa: E501
        :rtype: bool
        """
        return self._has_extended_retention_time_permission

    @has_extended_retention_time_permission.setter
    def has_extended_retention_time_permission(self, has_extended_retention_time_permission):
        """Sets the has_extended_retention_time_permission of this SaveTVWebApiResponseModelsRetentionTime.


        :param has_extended_retention_time_permission: The has_extended_retention_time_permission of this SaveTVWebApiResponseModelsRetentionTime.  # noqa: E501
        :type: bool
        """

        self._has_extended_retention_time_permission = has_extended_retention_time_permission

    @property
    def days_divx(self):
        """Gets the days_divx of this SaveTVWebApiResponseModelsRetentionTime.  # noqa: E501


        :return: The days_divx of this SaveTVWebApiResponseModelsRetentionTime.  # noqa: E501
        :rtype: int
        """
        return self._days_divx

    @days_divx.setter
    def days_divx(self, days_divx):
        """Sets the days_divx of this SaveTVWebApiResponseModelsRetentionTime.


        :param days_divx: The days_divx of this SaveTVWebApiResponseModelsRetentionTime.  # noqa: E501
        :type: int
        """

        self._days_divx = days_divx

    @property
    def days_h264mobile(self):
        """Gets the days_h264mobile of this SaveTVWebApiResponseModelsRetentionTime.  # noqa: E501


        :return: The days_h264mobile of this SaveTVWebApiResponseModelsRetentionTime.  # noqa: E501
        :rtype: int
        """
        return self._days_h264mobile

    @days_h264mobile.setter
    def days_h264mobile(self, days_h264mobile):
        """Sets the days_h264mobile of this SaveTVWebApiResponseModelsRetentionTime.


        :param days_h264mobile: The days_h264mobile of this SaveTVWebApiResponseModelsRetentionTime.  # noqa: E501
        :type: int
        """

        self._days_h264mobile = days_h264mobile

    @property
    def days_h264sd(self):
        """Gets the days_h264sd of this SaveTVWebApiResponseModelsRetentionTime.  # noqa: E501


        :return: The days_h264sd of this SaveTVWebApiResponseModelsRetentionTime.  # noqa: E501
        :rtype: int
        """
        return self._days_h264sd

    @days_h264sd.setter
    def days_h264sd(self, days_h264sd):
        """Sets the days_h264sd of this SaveTVWebApiResponseModelsRetentionTime.


        :param days_h264sd: The days_h264sd of this SaveTVWebApiResponseModelsRetentionTime.  # noqa: E501
        :type: int
        """

        self._days_h264sd = days_h264sd

    @property
    def days_h264hd(self):
        """Gets the days_h264hd of this SaveTVWebApiResponseModelsRetentionTime.  # noqa: E501


        :return: The days_h264hd of this SaveTVWebApiResponseModelsRetentionTime.  # noqa: E501
        :rtype: int
        """
        return self._days_h264hd

    @days_h264hd.setter
    def days_h264hd(self, days_h264hd):
        """Sets the days_h264hd of this SaveTVWebApiResponseModelsRetentionTime.


        :param days_h264hd: The days_h264hd of this SaveTVWebApiResponseModelsRetentionTime.  # noqa: E501
        :type: int
        """

        self._days_h264hd = days_h264hd

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaveTVWebApiResponseModelsRetentionTime, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaveTVWebApiResponseModelsRetentionTime):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
