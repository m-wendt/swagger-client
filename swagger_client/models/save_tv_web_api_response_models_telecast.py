# coding: utf-8

"""
    Save.TV API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SaveTVWebApiResponseModelsTelecast(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'title': 'str',
        'sub_title': 'str',
        'episode': 'str',
        'subject': 'str',
        'description': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'voluntary_self_regulation_of_the_movie_industry': 'str',
        'is_black_white': 'bool',
        'commentator': 'str',
        'director': 'str',
        'interpret': 'str',
        'moderator': 'str',
        'tv_category': 'SaveTVWebApiResponseModelsTvCategory',
        'tv_sub_category': 'SaveTVWebApiResponseModelsTvSubCategory',
        'tv_station': 'SaveTVWebApiResponseModelsTvStation',
        'image_url100': 'str',
        'image_url250': 'str',
        'image_url500': 'str',
        'roles': 'list[SaveTVWebApiResponseModelsRole]',
        'exists_record': 'bool',
        'is_highlight': 'bool',
        'is_omitted': 'bool',
        'update_date': 'datetime',
        'rating': 'SaveTVWebApiResponseModelsRating',
        'country': 'str',
        'year': 'int',
        'has_moved': 'bool',
        'slug': 'str'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'sub_title': 'subTitle',
        'episode': 'episode',
        'subject': 'subject',
        'description': 'description',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'voluntary_self_regulation_of_the_movie_industry': 'voluntarySelfRegulationOfTheMovieIndustry',
        'is_black_white': 'isBlackWhite',
        'commentator': 'commentator',
        'director': 'director',
        'interpret': 'interpret',
        'moderator': 'moderator',
        'tv_category': 'tvCategory',
        'tv_sub_category': 'tvSubCategory',
        'tv_station': 'tvStation',
        'image_url100': 'imageUrl100',
        'image_url250': 'imageUrl250',
        'image_url500': 'imageUrl500',
        'roles': 'roles',
        'exists_record': 'existsRecord',
        'is_highlight': 'isHighlight',
        'is_omitted': 'isOmitted',
        'update_date': 'updateDate',
        'rating': 'rating',
        'country': 'country',
        'year': 'year',
        'has_moved': 'hasMoved',
        'slug': 'slug'
    }

    def __init__(self, id=None, title=None, sub_title=None, episode=None, subject=None, description=None, start_date=None, end_date=None, voluntary_self_regulation_of_the_movie_industry=None, is_black_white=None, commentator=None, director=None, interpret=None, moderator=None, tv_category=None, tv_sub_category=None, tv_station=None, image_url100=None, image_url250=None, image_url500=None, roles=None, exists_record=None, is_highlight=None, is_omitted=None, update_date=None, rating=None, country=None, year=None, has_moved=None, slug=None):  # noqa: E501
        """SaveTVWebApiResponseModelsTelecast - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._title = None
        self._sub_title = None
        self._episode = None
        self._subject = None
        self._description = None
        self._start_date = None
        self._end_date = None
        self._voluntary_self_regulation_of_the_movie_industry = None
        self._is_black_white = None
        self._commentator = None
        self._director = None
        self._interpret = None
        self._moderator = None
        self._tv_category = None
        self._tv_sub_category = None
        self._tv_station = None
        self._image_url100 = None
        self._image_url250 = None
        self._image_url500 = None
        self._roles = None
        self._exists_record = None
        self._is_highlight = None
        self._is_omitted = None
        self._update_date = None
        self._rating = None
        self._country = None
        self._year = None
        self._has_moved = None
        self._slug = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if sub_title is not None:
            self.sub_title = sub_title
        if episode is not None:
            self.episode = episode
        if subject is not None:
            self.subject = subject
        if description is not None:
            self.description = description
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if voluntary_self_regulation_of_the_movie_industry is not None:
            self.voluntary_self_regulation_of_the_movie_industry = voluntary_self_regulation_of_the_movie_industry
        if is_black_white is not None:
            self.is_black_white = is_black_white
        if commentator is not None:
            self.commentator = commentator
        if director is not None:
            self.director = director
        if interpret is not None:
            self.interpret = interpret
        if moderator is not None:
            self.moderator = moderator
        if tv_category is not None:
            self.tv_category = tv_category
        if tv_sub_category is not None:
            self.tv_sub_category = tv_sub_category
        if tv_station is not None:
            self.tv_station = tv_station
        if image_url100 is not None:
            self.image_url100 = image_url100
        if image_url250 is not None:
            self.image_url250 = image_url250
        if image_url500 is not None:
            self.image_url500 = image_url500
        if roles is not None:
            self.roles = roles
        if exists_record is not None:
            self.exists_record = exists_record
        if is_highlight is not None:
            self.is_highlight = is_highlight
        if is_omitted is not None:
            self.is_omitted = is_omitted
        if update_date is not None:
            self.update_date = update_date
        if rating is not None:
            self.rating = rating
        if country is not None:
            self.country = country
        if year is not None:
            self.year = year
        if has_moved is not None:
            self.has_moved = has_moved
        if slug is not None:
            self.slug = slug

    @property
    def id(self):
        """Gets the id of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The id of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SaveTVWebApiResponseModelsTelecast.


        :param id: The id of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The title of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SaveTVWebApiResponseModelsTelecast.


        :param title: The title of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def sub_title(self):
        """Gets the sub_title of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The sub_title of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: str
        """
        return self._sub_title

    @sub_title.setter
    def sub_title(self, sub_title):
        """Sets the sub_title of this SaveTVWebApiResponseModelsTelecast.


        :param sub_title: The sub_title of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: str
        """

        self._sub_title = sub_title

    @property
    def episode(self):
        """Gets the episode of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The episode of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: str
        """
        return self._episode

    @episode.setter
    def episode(self, episode):
        """Sets the episode of this SaveTVWebApiResponseModelsTelecast.


        :param episode: The episode of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: str
        """

        self._episode = episode

    @property
    def subject(self):
        """Gets the subject of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The subject of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SaveTVWebApiResponseModelsTelecast.


        :param subject: The subject of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def description(self):
        """Gets the description of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The description of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SaveTVWebApiResponseModelsTelecast.


        :param description: The description of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def start_date(self):
        """Gets the start_date of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The start_date of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this SaveTVWebApiResponseModelsTelecast.


        :param start_date: The start_date of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The end_date of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this SaveTVWebApiResponseModelsTelecast.


        :param end_date: The end_date of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def voluntary_self_regulation_of_the_movie_industry(self):
        """Gets the voluntary_self_regulation_of_the_movie_industry of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The voluntary_self_regulation_of_the_movie_industry of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: str
        """
        return self._voluntary_self_regulation_of_the_movie_industry

    @voluntary_self_regulation_of_the_movie_industry.setter
    def voluntary_self_regulation_of_the_movie_industry(self, voluntary_self_regulation_of_the_movie_industry):
        """Sets the voluntary_self_regulation_of_the_movie_industry of this SaveTVWebApiResponseModelsTelecast.


        :param voluntary_self_regulation_of_the_movie_industry: The voluntary_self_regulation_of_the_movie_industry of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: str
        """

        self._voluntary_self_regulation_of_the_movie_industry = voluntary_self_regulation_of_the_movie_industry

    @property
    def is_black_white(self):
        """Gets the is_black_white of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The is_black_white of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: bool
        """
        return self._is_black_white

    @is_black_white.setter
    def is_black_white(self, is_black_white):
        """Sets the is_black_white of this SaveTVWebApiResponseModelsTelecast.


        :param is_black_white: The is_black_white of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: bool
        """

        self._is_black_white = is_black_white

    @property
    def commentator(self):
        """Gets the commentator of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The commentator of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: str
        """
        return self._commentator

    @commentator.setter
    def commentator(self, commentator):
        """Sets the commentator of this SaveTVWebApiResponseModelsTelecast.


        :param commentator: The commentator of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: str
        """

        self._commentator = commentator

    @property
    def director(self):
        """Gets the director of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The director of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: str
        """
        return self._director

    @director.setter
    def director(self, director):
        """Sets the director of this SaveTVWebApiResponseModelsTelecast.


        :param director: The director of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: str
        """

        self._director = director

    @property
    def interpret(self):
        """Gets the interpret of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The interpret of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: str
        """
        return self._interpret

    @interpret.setter
    def interpret(self, interpret):
        """Sets the interpret of this SaveTVWebApiResponseModelsTelecast.


        :param interpret: The interpret of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: str
        """

        self._interpret = interpret

    @property
    def moderator(self):
        """Gets the moderator of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The moderator of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: str
        """
        return self._moderator

    @moderator.setter
    def moderator(self, moderator):
        """Sets the moderator of this SaveTVWebApiResponseModelsTelecast.


        :param moderator: The moderator of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: str
        """

        self._moderator = moderator

    @property
    def tv_category(self):
        """Gets the tv_category of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The tv_category of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: SaveTVWebApiResponseModelsTvCategory
        """
        return self._tv_category

    @tv_category.setter
    def tv_category(self, tv_category):
        """Sets the tv_category of this SaveTVWebApiResponseModelsTelecast.


        :param tv_category: The tv_category of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: SaveTVWebApiResponseModelsTvCategory
        """

        self._tv_category = tv_category

    @property
    def tv_sub_category(self):
        """Gets the tv_sub_category of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The tv_sub_category of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: SaveTVWebApiResponseModelsTvSubCategory
        """
        return self._tv_sub_category

    @tv_sub_category.setter
    def tv_sub_category(self, tv_sub_category):
        """Sets the tv_sub_category of this SaveTVWebApiResponseModelsTelecast.


        :param tv_sub_category: The tv_sub_category of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: SaveTVWebApiResponseModelsTvSubCategory
        """

        self._tv_sub_category = tv_sub_category

    @property
    def tv_station(self):
        """Gets the tv_station of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The tv_station of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: SaveTVWebApiResponseModelsTvStation
        """
        return self._tv_station

    @tv_station.setter
    def tv_station(self, tv_station):
        """Sets the tv_station of this SaveTVWebApiResponseModelsTelecast.


        :param tv_station: The tv_station of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: SaveTVWebApiResponseModelsTvStation
        """

        self._tv_station = tv_station

    @property
    def image_url100(self):
        """Gets the image_url100 of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The image_url100 of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: str
        """
        return self._image_url100

    @image_url100.setter
    def image_url100(self, image_url100):
        """Sets the image_url100 of this SaveTVWebApiResponseModelsTelecast.


        :param image_url100: The image_url100 of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: str
        """

        self._image_url100 = image_url100

    @property
    def image_url250(self):
        """Gets the image_url250 of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The image_url250 of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: str
        """
        return self._image_url250

    @image_url250.setter
    def image_url250(self, image_url250):
        """Sets the image_url250 of this SaveTVWebApiResponseModelsTelecast.


        :param image_url250: The image_url250 of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: str
        """

        self._image_url250 = image_url250

    @property
    def image_url500(self):
        """Gets the image_url500 of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The image_url500 of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: str
        """
        return self._image_url500

    @image_url500.setter
    def image_url500(self, image_url500):
        """Sets the image_url500 of this SaveTVWebApiResponseModelsTelecast.


        :param image_url500: The image_url500 of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: str
        """

        self._image_url500 = image_url500

    @property
    def roles(self):
        """Gets the roles of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The roles of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: list[SaveTVWebApiResponseModelsRole]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this SaveTVWebApiResponseModelsTelecast.


        :param roles: The roles of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: list[SaveTVWebApiResponseModelsRole]
        """

        self._roles = roles

    @property
    def exists_record(self):
        """Gets the exists_record of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The exists_record of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: bool
        """
        return self._exists_record

    @exists_record.setter
    def exists_record(self, exists_record):
        """Sets the exists_record of this SaveTVWebApiResponseModelsTelecast.


        :param exists_record: The exists_record of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: bool
        """

        self._exists_record = exists_record

    @property
    def is_highlight(self):
        """Gets the is_highlight of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The is_highlight of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: bool
        """
        return self._is_highlight

    @is_highlight.setter
    def is_highlight(self, is_highlight):
        """Sets the is_highlight of this SaveTVWebApiResponseModelsTelecast.


        :param is_highlight: The is_highlight of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: bool
        """

        self._is_highlight = is_highlight

    @property
    def is_omitted(self):
        """Gets the is_omitted of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The is_omitted of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: bool
        """
        return self._is_omitted

    @is_omitted.setter
    def is_omitted(self, is_omitted):
        """Sets the is_omitted of this SaveTVWebApiResponseModelsTelecast.


        :param is_omitted: The is_omitted of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: bool
        """

        self._is_omitted = is_omitted

    @property
    def update_date(self):
        """Gets the update_date of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The update_date of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: datetime
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this SaveTVWebApiResponseModelsTelecast.


        :param update_date: The update_date of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: datetime
        """

        self._update_date = update_date

    @property
    def rating(self):
        """Gets the rating of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The rating of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: SaveTVWebApiResponseModelsRating
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this SaveTVWebApiResponseModelsTelecast.


        :param rating: The rating of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: SaveTVWebApiResponseModelsRating
        """

        self._rating = rating

    @property
    def country(self):
        """Gets the country of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The country of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SaveTVWebApiResponseModelsTelecast.


        :param country: The country of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def year(self):
        """Gets the year of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The year of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this SaveTVWebApiResponseModelsTelecast.


        :param year: The year of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def has_moved(self):
        """Gets the has_moved of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The has_moved of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: bool
        """
        return self._has_moved

    @has_moved.setter
    def has_moved(self, has_moved):
        """Sets the has_moved of this SaveTVWebApiResponseModelsTelecast.


        :param has_moved: The has_moved of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: bool
        """

        self._has_moved = has_moved

    @property
    def slug(self):
        """Gets the slug of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501


        :return: The slug of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this SaveTVWebApiResponseModelsTelecast.


        :param slug: The slug of this SaveTVWebApiResponseModelsTelecast.  # noqa: E501
        :type: str
        """

        self._slug = slug

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaveTVWebApiResponseModelsTelecast, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaveTVWebApiResponseModelsTelecast):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
