# coding: utf-8

"""
    Save.TV API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SystemThreadingCancellationToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_cancellation_requested': 'bool',
        'can_be_canceled': 'bool',
        'wait_handle': 'SystemThreadingWaitHandle'
    }

    attribute_map = {
        'is_cancellation_requested': 'IsCancellationRequested',
        'can_be_canceled': 'CanBeCanceled',
        'wait_handle': 'WaitHandle'
    }

    def __init__(self, is_cancellation_requested=None, can_be_canceled=None, wait_handle=None):  # noqa: E501
        """SystemThreadingCancellationToken - a model defined in Swagger"""  # noqa: E501

        self._is_cancellation_requested = None
        self._can_be_canceled = None
        self._wait_handle = None
        self.discriminator = None

        if is_cancellation_requested is not None:
            self.is_cancellation_requested = is_cancellation_requested
        if can_be_canceled is not None:
            self.can_be_canceled = can_be_canceled
        if wait_handle is not None:
            self.wait_handle = wait_handle

    @property
    def is_cancellation_requested(self):
        """Gets the is_cancellation_requested of this SystemThreadingCancellationToken.  # noqa: E501


        :return: The is_cancellation_requested of this SystemThreadingCancellationToken.  # noqa: E501
        :rtype: bool
        """
        return self._is_cancellation_requested

    @is_cancellation_requested.setter
    def is_cancellation_requested(self, is_cancellation_requested):
        """Sets the is_cancellation_requested of this SystemThreadingCancellationToken.


        :param is_cancellation_requested: The is_cancellation_requested of this SystemThreadingCancellationToken.  # noqa: E501
        :type: bool
        """

        self._is_cancellation_requested = is_cancellation_requested

    @property
    def can_be_canceled(self):
        """Gets the can_be_canceled of this SystemThreadingCancellationToken.  # noqa: E501


        :return: The can_be_canceled of this SystemThreadingCancellationToken.  # noqa: E501
        :rtype: bool
        """
        return self._can_be_canceled

    @can_be_canceled.setter
    def can_be_canceled(self, can_be_canceled):
        """Sets the can_be_canceled of this SystemThreadingCancellationToken.


        :param can_be_canceled: The can_be_canceled of this SystemThreadingCancellationToken.  # noqa: E501
        :type: bool
        """

        self._can_be_canceled = can_be_canceled

    @property
    def wait_handle(self):
        """Gets the wait_handle of this SystemThreadingCancellationToken.  # noqa: E501


        :return: The wait_handle of this SystemThreadingCancellationToken.  # noqa: E501
        :rtype: SystemThreadingWaitHandle
        """
        return self._wait_handle

    @wait_handle.setter
    def wait_handle(self, wait_handle):
        """Sets the wait_handle of this SystemThreadingCancellationToken.


        :param wait_handle: The wait_handle of this SystemThreadingCancellationToken.  # noqa: E501
        :type: SystemThreadingWaitHandle
        """

        self._wait_handle = wait_handle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemThreadingCancellationToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemThreadingCancellationToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
