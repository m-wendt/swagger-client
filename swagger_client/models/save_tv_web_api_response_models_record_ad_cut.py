# coding: utf-8

"""
    Save.TV API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SaveTVWebApiResponseModelsRecordAdCut(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_telecast_start_set': 'bool',
        'is_telecast_end_set': 'bool',
        'expected_length': 'int',
        'available_length': 'int'
    }

    attribute_map = {
        'is_telecast_start_set': 'isTelecastStartSet',
        'is_telecast_end_set': 'isTelecastEndSet',
        'expected_length': 'expectedLength',
        'available_length': 'availableLength'
    }

    def __init__(self, is_telecast_start_set=None, is_telecast_end_set=None, expected_length=None, available_length=None):  # noqa: E501
        """SaveTVWebApiResponseModelsRecordAdCut - a model defined in Swagger"""  # noqa: E501

        self._is_telecast_start_set = None
        self._is_telecast_end_set = None
        self._expected_length = None
        self._available_length = None
        self.discriminator = None

        if is_telecast_start_set is not None:
            self.is_telecast_start_set = is_telecast_start_set
        if is_telecast_end_set is not None:
            self.is_telecast_end_set = is_telecast_end_set
        if expected_length is not None:
            self.expected_length = expected_length
        if available_length is not None:
            self.available_length = available_length

    @property
    def is_telecast_start_set(self):
        """Gets the is_telecast_start_set of this SaveTVWebApiResponseModelsRecordAdCut.  # noqa: E501


        :return: The is_telecast_start_set of this SaveTVWebApiResponseModelsRecordAdCut.  # noqa: E501
        :rtype: bool
        """
        return self._is_telecast_start_set

    @is_telecast_start_set.setter
    def is_telecast_start_set(self, is_telecast_start_set):
        """Sets the is_telecast_start_set of this SaveTVWebApiResponseModelsRecordAdCut.


        :param is_telecast_start_set: The is_telecast_start_set of this SaveTVWebApiResponseModelsRecordAdCut.  # noqa: E501
        :type: bool
        """

        self._is_telecast_start_set = is_telecast_start_set

    @property
    def is_telecast_end_set(self):
        """Gets the is_telecast_end_set of this SaveTVWebApiResponseModelsRecordAdCut.  # noqa: E501


        :return: The is_telecast_end_set of this SaveTVWebApiResponseModelsRecordAdCut.  # noqa: E501
        :rtype: bool
        """
        return self._is_telecast_end_set

    @is_telecast_end_set.setter
    def is_telecast_end_set(self, is_telecast_end_set):
        """Sets the is_telecast_end_set of this SaveTVWebApiResponseModelsRecordAdCut.


        :param is_telecast_end_set: The is_telecast_end_set of this SaveTVWebApiResponseModelsRecordAdCut.  # noqa: E501
        :type: bool
        """

        self._is_telecast_end_set = is_telecast_end_set

    @property
    def expected_length(self):
        """Gets the expected_length of this SaveTVWebApiResponseModelsRecordAdCut.  # noqa: E501


        :return: The expected_length of this SaveTVWebApiResponseModelsRecordAdCut.  # noqa: E501
        :rtype: int
        """
        return self._expected_length

    @expected_length.setter
    def expected_length(self, expected_length):
        """Sets the expected_length of this SaveTVWebApiResponseModelsRecordAdCut.


        :param expected_length: The expected_length of this SaveTVWebApiResponseModelsRecordAdCut.  # noqa: E501
        :type: int
        """

        self._expected_length = expected_length

    @property
    def available_length(self):
        """Gets the available_length of this SaveTVWebApiResponseModelsRecordAdCut.  # noqa: E501


        :return: The available_length of this SaveTVWebApiResponseModelsRecordAdCut.  # noqa: E501
        :rtype: int
        """
        return self._available_length

    @available_length.setter
    def available_length(self, available_length):
        """Sets the available_length of this SaveTVWebApiResponseModelsRecordAdCut.


        :param available_length: The available_length of this SaveTVWebApiResponseModelsRecordAdCut.  # noqa: E501
        :type: int
        """

        self._available_length = available_length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SaveTVWebApiResponseModelsRecordAdCut, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SaveTVWebApiResponseModelsRecordAdCut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
